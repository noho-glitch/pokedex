{"version":3,"sources":["Pokecard.js","Pokedex.js","Pokegame.js","App.js","serviceWorker.js","index.js"],"names":["Pokecard","number","imgSrc","this","props","id","slice","className","name","src","alt","type","exp","Component","Pokedex","isWinner","pokemon","map","p","base_experience","Pokegame","hand1","hand2","length","randIdx","Math","floor","random","randPokemon","splice","push","console","log","exp1","reduce","exp2","defaultProps","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mTAwBeA,G,uLAdX,IAJaC,EAITC,EAAM,UANG,8DAMH,QAJGD,EAIyBE,KAAKC,MAAMC,KAJf,IAAM,YAAKJ,GAASK,OAAO,GAAKL,EAIxD,QACV,OACE,yBAAKM,UAAU,YACb,4BAAKJ,KAAKC,MAAMI,MAChB,yBAAKD,UAAU,YACb,yBAAKE,IAAKP,EAAQQ,IAAKP,KAAKC,MAAMI,QAEpC,yBAAKD,UAAU,iBAAf,SAAsCJ,KAAKC,MAAMO,MACjD,yBAAKJ,UAAU,iBAAf,QAAqCJ,KAAKC,MAAMQ,U,GAVjCC,cCyBRC,G,uLAfP,OACI,yBAAKP,UAAU,WACX,gDAAsBJ,KAAKC,MAAMQ,KACjC,wBAAIL,UAAWJ,KAAKC,MAAMW,SAAW,iBAAmB,iBAAkBZ,KAAKC,MAAMW,SAAW,UAAY,UAC5G,yBAAKR,UAAU,iBACdJ,KAAKC,MAAMY,QAAQC,KAAI,SAACC,GAAD,OACpB,kBAAC,EAAD,CAAUb,GAAIa,EAAEb,GAAIG,KAAMU,EAAEV,KAAMG,KAAMO,EAAEP,KAAMC,IAAKM,EAAEC,2B,GApBrDN,cCAhBO,E,iLAgBE,IAFA,IAAIC,EAAQ,GACRC,EAAK,YAAQnB,KAAKC,MAAMY,SACrBK,EAAME,OAASD,EAAMC,QAAQ,CAChC,IAAIC,EAAUC,KAAKC,MAAMD,KAAKE,SAAWL,EAAMC,QAC3CK,EAAcN,EAAMO,OAAOL,EAAS,GAAG,GAC3CH,EAAMS,KAAKF,GAGfG,QAAQC,IAAIX,GACZU,QAAQC,IAAIV,GAEZ,IAAIW,EAAOZ,EAAMa,QAAO,SAACtB,EAAKI,GAAN,OAAkBJ,EAAMI,EAAQG,kBAAiB,GACrEgB,EAAOb,EAAMY,QAAO,SAACtB,EAAKI,GAAN,OAAkBJ,EAAMI,EAAQG,kBAAiB,GACzE,OACI,6BACI,kBAAC,EAAD,CAASH,QAASK,EAAOT,IAAKqB,EAAMlB,SAAUkB,EAAOE,IACrD,kBAAC,EAAD,CAASnB,QAASM,EAAOV,IAAKuB,EAAMpB,SAAUoB,EAAOF,S,GA9B9CpB,aAAjBO,EACKgB,aAAe,CAClBpB,QAAS,CACL,CAAEX,GAAI,EAAGG,KAAM,aAAcG,KAAM,OAAQQ,gBAAiB,IACrE,CAAEd,GAAI,EAAGG,KAAM,WAAYG,KAAM,QAASQ,gBAAiB,IAC3D,CAAEd,GAAI,GAAIG,KAAM,UAAWG,KAAM,MAAOQ,gBAAiB,IACzD,CAAEd,GAAI,GAAIG,KAAM,aAAcG,KAAM,SAAUQ,gBAAiB,KAC/D,CAAEd,GAAI,GAAIG,KAAM,UAAWG,KAAM,WAAYQ,gBAAiB,KAC9D,CAAEd,GAAI,GAAIG,KAAM,aAAcG,KAAM,SAAUQ,gBAAiB,IAC/D,CAAEd,GAAI,GAAIG,KAAM,SAAUG,KAAM,SAAUQ,gBAAiB,KAC3D,CAAEd,GAAI,IAAKG,KAAM,QAASG,KAAM,SAAUQ,gBAAiB,MA0B/CC,Q,MC5BAiB,MARf,WACE,OACE,yBAAK9B,UAAU,OACb,kBAAC,EAAD,QCKc+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvB,QAAQuB,MAAMA,EAAMC,c","file":"static/js/main.5548cb0f.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Pokecard.css\";\n\n// const POKE_API = 'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/';\nconst POKE_API = \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/\";\n\nlet padToThree = number => (number <= 999 ? `00${number}`.slice(-3) : number);\n\nclass Pokecard extends Component {\n  render() {\n    let imgSrc = `${POKE_API}${padToThree(this.props.id)}.png`;\n    return (\n      <div className=\"Pokecard\">\n        <h1>{this.props.name}</h1>\n        <div className=\"Poke-img\">\n          <img src={imgSrc} alt={this.props.name} />\n        </div>\n        <div className=\"Pokecard-data\">Type: {this.props.type}</div>\n        <div className=\"Pokecard-data\">EXP: {this.props.exp}</div>\n      </div>\n    );\n  }\n}\n\nexport default Pokecard;\n","import React, { Component } from 'react'\nimport Pokecard from './Pokecard'\nimport './Pokedex.css'\n\nclass Pokedex extends Component {\n    // static defaultProps = {\n    //     pokemon: [\n    //         { id: 4, name: 'Charmander', type: 'fire', base_experience: 62 },\n\t// \t\t{ id: 7, name: 'Squirtle', type: 'water', base_experience: 63 },\n\t// \t\t{ id: 11, name: 'Metapod', type: 'bug', base_experience: 72 },\n\t// \t\t{ id: 12, name: 'Butterfree', type: 'flying', base_experience: 178 },\n\t// \t\t{ id: 25, name: 'Pikachu', type: 'electric', base_experience: 112 },\n\t// \t\t{ id: 39, name: 'Jigglypuff', type: 'normal', base_experience: 95 },\n\t// \t\t{ id: 94, name: 'Gengar', type: 'poison', base_experience: 225 },\n\t// \t\t{ id: 133, name: 'Eevee', type: 'normal', base_experience: 65 }\n    //     ]\n    // };\n    render() {\n        return (\n            <div className=\"Pokedex\">\n                <p>Total Experience: {this.props.exp}</p>\n                <h2 className={this.props.isWinner ? 'Pokedex-winner' : 'Pokedex-loser'}>{this.props.isWinner ? 'WINNER!' : 'LOSER!'}</h2>\n                <div className=\"Pokedex-cards\">\n                {this.props.pokemon.map((p) => (\n                    <Pokecard id={p.id} name={p.name} type={p.type} exp={p.base_experience} \n                    />     \n                ))}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Pokedex;","import React, { Component } from 'react'\nimport Pokedex from './Pokedex'\nimport Pokecard from './Pokecard';\n\nclass Pokegame extends Component {\n    static defaultProps = {\n        pokemon: [\n            { id: 4, name: 'Charmander', type: 'fire', base_experience: 62 },\n\t\t\t{ id: 7, name: 'Squirtle', type: 'water', base_experience: 63 },\n\t\t\t{ id: 11, name: 'Metapod', type: 'bug', base_experience: 72 },\n\t\t\t{ id: 12, name: 'Butterfree', type: 'flying', base_experience: 178 },\n\t\t\t{ id: 25, name: 'Pikachu', type: 'electric', base_experience: 112 },\n\t\t\t{ id: 39, name: 'Jigglypuff', type: 'normal', base_experience: 95 },\n\t\t\t{ id: 94, name: 'Gengar', type: 'poison', base_experience: 225 },\n\t\t\t{ id: 133, name: 'Eevee', type: 'normal', base_experience: 65 }\n        ]\n    };\n    render(){\n        let hand1 = [];\n        let hand2 = [ ...this.props.pokemon ];\n        while (hand1.length < hand2.length) {\n            let randIdx = Math.floor(Math.random() * hand2.length);\n            let randPokemon = hand2.splice(randIdx, 1)[0];\n            hand1.push(randPokemon)\n           \n        }\n        console.log(hand1);\n        console.log(hand2);\n\n        let exp1 = hand1.reduce((exp, pokemon) => exp + pokemon.base_experience, 0);\n        let exp2 = hand2.reduce((exp, pokemon) => exp + pokemon.base_experience, 0);\n        return(\n            <div>\n                <Pokedex pokemon={hand1} exp={exp1} isWinner={exp1 > exp2}/>\n                <Pokedex pokemon={hand2} exp={exp2} isWinner={exp2 > exp1}/>\n            </div>\n        )\n    }\n}\n\nexport default Pokegame;","import React from 'react';\nimport Pokegame from './Pokegame'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Pokegame/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}